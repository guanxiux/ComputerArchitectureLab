`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: USTC ESLAB (Embeded System Lab)
// Engineer: Haojun Xia
// Create Date: 2019/02/08
// Design Name: RISCV-Pipline CPU
// Module Name: ControlUnit
// Target Devices: Nexys4
// Tool Versions: Vivado 2017.4.1
// Description: RISC-V Instruction Decoder
//////////////////////////////////////////////////////////////////////////////////
`include "Parameters.v"
module ControlUnit(
    input wire [6:0] Op,
    input wire [2:0] Fn3,
    input wire [6:0] Fn7,
    output wire JalD,
    output wire JalrD,
    output reg [2:0] RegWriteD,
    output wire MemToRegD,
    output reg [3:0] MemWriteD,
    output wire LoadNpcD,
    output reg [1:0] RegReadD,
    output reg [2:0] BranchTypeD,
    output reg [3:0] AluContrlD,
    output reg [1:0] AluSrc2D,
    output wire AluSrc1D,
    output reg [2:0] ImmType
    );
    /*SLLI„ÄÅSRLI„ÄÅSRAI„ÄÅADD „ÄÅSUB „ÄÅSLL „ÄÅSLT „Ä? SLTU„ÄÅXOR„ÄÅSRL „ÄÅSRA„ÄÅOR „ÄÅAND„ÄÅADDI„ÄÅSLTI „ÄÅSLTIU„ÄÅXORI „ÄÅORI„ÄÅANDI „ÄÅLUI„Ä? AUIPC 21*/
    wire [16:0] Instr;

    initial begin
        RegWriteD = 0;
        MemWriteD = 0;
        RegReadD = 0;
        BranchTypeD = 0;
        AluContrlD = 0;
        AluSrc2D = 0;
        ImmType = 0;
    end

    assign Instr = {Fn7[6:0], Fn3[2:0], Op[6:0]};
    localparam I_S_type       = 7'b0010011;
    localparam R_type       = 7'b0110011;

    localparam LUI_instr    = 17'bxxxxxxx_xxx_0110111;
    localparam AUIPC_instr  = 17'bxxxxxxx_xxx_0010111;
    localparam ADDI_instr   = 17'bxxxxxxx_000_0010011;
    localparam SLTI_instr   = 17'bxxxxxxx_010_0010011;
    localparam SLTIU_instr  = 17'bxxxxxxx_011_0010011;
    localparam XORI_instr   = 17'bxxxxxxx_100_0010011;
    localparam ORI_instr    = 17'bxxxxxxx_110_0010011;
    localparam ANDI_instr   = 17'bxxxxxxx_111_0010011;
    localparam SLLI_instr   = 17'b0000000_001_0010011;
    localparam SRLI_instr   = 17'b0000000_101_0010011;
    localparam SRAI_instr   = 17'b0100000_101_0010011;
    localparam ADD_instr    = 17'b0000000_000_0110011;
    localparam SUB_instr    = 17'b0100000_000_0110011;
    localparam SLL_instr    = 17'b0000000_001_0110011;
    localparam SLT_instr    = 17'b0000000_010_0110011;
    localparam SLTU_instr   = 17'b0000000_011_0110011;
    localparam XOR_instr    = 17'b0000000_100_0110011;
    localparam SRL_instr    = 17'b0000000_101_0110011;
    localparam SRA_instr    = 17'b0100000_101_0110011;
    localparam OR_instr     = 17'b0000000_110_0110011;
    localparam AND_instr    = 17'b0000000_111_0110011;

assign JalD = 0;
assign JalrD = 0;

//[2:0]RegWriteD
// RegWriteD        Ë°®Á§∫IDÈò∂ÊÆµÁöÑÊåá‰ª§ÂØπÂ∫îÁöÑ ÂØÑÂ≠òÂô®ÂÜôÂÖ•Ê®°Âº? ÔºåÊâÄÊúâÊ®°ÂºèÂÆö‰πâÂú®Parameters.v‰∏?
always @(*) begin
    case (Op)
        I_S_type  : RegWriteD <= `LW;
        R_type  : RegWriteD <= `LW;
        default : RegWriteD <= `NOREGWRITE;
    endcase
end

// MemToRegD==1     Ë°®Á§∫IDÈò∂ÊÆµÁöÑÊåá‰ª§ÈúÄË¶ÅÂ∞Üdata memoryËØªÂèñÁöÑÂ?ºÂÜôÂÖ•ÂØÑÂ≠òÂô®,
assign MemToRegD = 0;

//[3:0]MemWriteD
// MemWriteD        ÂÖ?4bitÔºåÈááÁî®Áã¨ÁÉ≠Á†ÅÊ†ºÂºèÔºåÂØπ‰∫édata memoryÁö?32bitÂ≠óÊåâbyte
//ËøõË°åÂÜôÂÖ•,MemWriteD=0001Ë°®Á§∫Âè™ÂÜôÂÖ•ÊúÄ‰Ω?1‰∏™byteÔºåÂíåxilinx bramÁöÑÊé•Âè£Á±ª‰º?
always @(*) begin
    case (Instr)
        default : MemWriteD <= 4'b0;
    endcase
end

// LoadNpcD==1      Ë°®Á§∫Â∞ÜNextPCËæìÂá∫Âà∞ResultM
assign LoadNpcD = 0;

//[1:0]RegReadD
// RegReadD[1]==1   Ë°®Á§∫A1[19:15]ÂØπÂ∫îÁöÑÂØÑÂ≠òÂô®ÂÄºË¢´‰ΩøÁî®Âà∞‰∫ÜÔºåRegReadD[0]==1Ë°®Á§∫A2[24:20]ÂØπÂ∫îÁöÑÂØÑÂ≠òÂô®ÂÄºË¢´‰ΩøÁî®Âà∞‰∫ÜÔºåÁî®‰∫éforwardÁöÑÂ§ÑÁê?
always @(*) begin
    case (Op)
        I_S_type    : RegReadD <= 2'b10;
        R_type      : RegReadD <= 2'b11;
        default : RegReadD <= 2'b0;
    endcase
end

//[2:0]BranchTypeD
// BranchTypeD      Ë°®Á§∫‰∏çÂêåÁöÑÂàÜÊîØÁ±ªÂûãÔºåÊâ?ÊúâÁ±ªÂûãÂÆö‰πâÂú®Parameters.v‰∏?
always @(*) begin
    case (Instr)
        default : BranchTypeD <= `NOBRANCH;
    endcase
end

// AluSrc2D         Ë°®Á§∫AluËæìÂÖ•Ê∫?2ÁöÑÈ?âÊã©
// AluSrc1D         Ë°®Á§∫AluËæìÂÖ•Ê∫?1ÁöÑÈ?âÊã©
always @(*) begin
    case (Op)
        I_S_type    : AluSrc2D <= 2'b10;
        R_type      : AluSrc2D <= 2'b00;
        default : AluSrc2D <= 2'b0;
    endcase
end

assign AluSrc1D = (Instr == AUIPC_instr) ? 1 : 0;
//[3:0]AluContrlD
// AluContrlD       Ë°®Á§∫‰∏çÂêåÁöÑALUËÆ°ÁÆóÂäüËÉΩÔºåÊâÄÊúâÁ±ªÂûãÂÆö‰πâÂú®Parameters.v‰∏?
always @(*) begin
    case (Instr)
        SLLI_instr  :   AluContrlD <= `SLL;
        SRLI_instr  :   AluContrlD <= `SRL;
        SRAI_instr  :   AluContrlD <= `SRA;
        ADDI_instr  :   AluContrlD <= `ADD;
        XORI_instr  :   AluContrlD <= `XOR;
        ORI_instr   :   AluContrlD <= `OR;
        ANDI_instr  :   AluContrlD <= `AND;
        SLTI_instr  :   AluContrlD <= `SLT;
        SLTIU_instr :   AluContrlD <= `SLTU;

        SLL_instr   :   AluContrlD <= `SLL;
        SRL_instr   :   AluContrlD <= `SRL;
        SRA_instr   :   AluContrlD <= `SRA;
        ADD_instr   :   AluContrlD <= `ADD;
        SUB_instr   :   AluContrlD <= `SUB;
        XOR_instr   :   AluContrlD <= `XOR;
        OR_instr    :   AluContrlD <= `OR;
        AND_instr   :   AluContrlD <= `AND;
        SLT_instr   :   AluContrlD <= `SLT;
        SLTU_instr  :   AluContrlD <= `SLTU;
        LUI_instr   :   AluContrlD <= `LUI;
        default : AluContrlD <= 4'b0;
    endcase
end

//[2:0]ImmType
// ImmType          Ë°®Á§∫Êåá‰ª§ÁöÑÁ´ãÂç≥Êï∞Ê†ºÂºèÔºåÊâÄÊúâÁ±ªÂûãÂÆö‰πâÂú®Parameters.v‰∏?
always @(*) begin
    case (Instr)
        ADDI_instr  :   ImmType <= `ITYPE;
        SLTI_instr  :   ImmType <= `ITYPE;
        SLTIU_instr :   ImmType <= `ITYPE;
        XORI_instr  :   ImmType <= `ITYPE;
        ORI_instr   :   ImmType <= `ITYPE;
        ANDI_instr  :   ImmType <= `ITYPE;
        SLLI_instr  :   ImmType <= `STYPE;
        SRLI_instr  :   ImmType <= `STYPE;
        SRAI_instr  :   ImmType <= `STYPE;
        default : ImmType <= `RTYPE;
    endcase
end


endmodule

//ÂäüËÉΩËØ¥Êòé
    //ControlUnit       ÊòØÊú¨CPUÁöÑÊåá‰ª§ËØëÁ†ÅÂô®ÔºåÁªÑÂêàÈ?ªËæëÁîµË∑Ø
//ËæìÂÖ•
    // Op               ÊòØÊåá‰ª§ÁöÑÊìç‰ΩúÁ†ÅÈÉ®Âà?
    // Fn3              ÊòØÊåá‰ª§ÁöÑfunc3ÈÉ®ÂàÜ
    // Fn7              ÊòØÊåá‰ª§ÁöÑfunc7ÈÉ®ÂàÜ
//ËæìÂá∫
    // JalD==1          Ë°®Á§∫JalÊåá‰ª§Âà∞ËææIDËØëÁ†ÅÈò∂ÊÆµ
    // JalrD==1         Ë°®Á§∫JalrÊåá‰ª§Âà∞ËææIDËØëÁ†ÅÈò∂ÊÆµ
    // RegWriteD        Ë°®Á§∫IDÈò∂ÊÆµÁöÑÊåá‰ª§ÂØπÂ∫îÁöÑ ÂØÑÂ≠òÂô®ÂÜôÂÖ•Ê®°Âº? ÔºåÊâÄÊúâÊ®°ÂºèÂÆö‰πâÂú®Parameters.v‰∏?
    // MemToRegD==1     Ë°®Á§∫IDÈò∂ÊÆµÁöÑÊåá‰ª§ÈúÄË¶ÅÂ∞Üdata memoryËØªÂèñÁöÑÂ?ºÂÜôÂÖ•ÂØÑÂ≠òÂô®,
    // MemWriteD        ÂÖ?4bitÔºåÈááÁî®Áã¨ÁÉ≠Á†ÅÊ†ºÂºèÔºåÂØπ‰∫édata memoryÁö?32bitÂ≠óÊåâbyteËøõË°åÂÜôÂÖ•,MemWriteD=0001Ë°®Á§∫Âè™ÂÜôÂÖ•ÊúÄ‰Ω?1‰∏™byteÔºåÂíåxilinx bramÁöÑÊé•Âè£Á±ª‰º?
    // LoadNpcD==1      Ë°®Á§∫Â∞ÜNextPCËæìÂá∫Âà∞ResultM
    // RegReadD[1]==1   Ë°®Á§∫A1ÂØπÂ∫îÁöÑÂØÑÂ≠òÂô®ÂÄºË¢´‰ΩøÁî®Âà∞‰∫ÜÔºåRegReadD[0]==1Ë°®Á§∫A2ÂØπÂ∫îÁöÑÂØÑÂ≠òÂô®ÂÄºË¢´‰ΩøÁî®Âà∞‰∫ÜÔºåÁî®‰∫éforwardÁöÑÂ§ÑÁê?
    // BranchTypeD      Ë°®Á§∫‰∏çÂêåÁöÑÂàÜÊîØÁ±ªÂûãÔºåÊâ?ÊúâÁ±ªÂûãÂÆö‰πâÂú®Parameters.v‰∏?
    // AluContrlD       Ë°®Á§∫‰∏çÂêåÁöÑALUËÆ°ÁÆóÂäüËÉΩÔºåÊâÄÊúâÁ±ªÂûãÂÆö‰πâÂú®Parameters.v‰∏?
    // AluSrc2D         Ë°®Á§∫AluËæìÂÖ•Ê∫?2ÁöÑÈ?âÊã©
    // AluSrc1D         Ë°®Á§∫AluËæìÂÖ•Ê∫?1ÁöÑÈ?âÊã©
    // ImmType          Ë°®Á§∫Êåá‰ª§ÁöÑÁ´ãÂç≥Êï∞Ê†ºÂºèÔºåÊâÄÊúâÁ±ªÂûãÂÆö‰πâÂú®Parameters.v‰∏?
//ÂÆûÈ™åË¶ÅÊ±Ç
    //ÂÆûÁé∞ControlUnitÊ®°Âùó
